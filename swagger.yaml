openapi: 3.0.0
info:
  title: Fs-Army blog application
  version: 1.0.0
  description: This is the first professional project we creating in Fs-Army.This is simple blog api where we can create a new accunt, login the system and create articles that will be visible publicly.
  contact:
    name: admin
    email: admin@mail.com
    url: www.example.com
servers:
  - url: http://localhost:4000/api/v1
    description: Dev Server
tags:
  - name: Auth
    description: Authentication endpoint(public+private)
  - name: Article
    description: article end points(public+private)
  - name: User
    description: user end points(public+private)
  - name: Comment
    description: comment endpoints (public + private)
paths:
  /auth/signup:
    post:
      tags: [Auth]
      description: signup endpoint
      requestBody:
        content:
          "application/json":
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: user_name
                email:
                  type: string
                  format: email
                  example: user@mail.com
                password:
                  type: string
                  format: password
                  example: pass123
              required:
                - name
                - email
                - password
      responses:
        "201":
          description: signup successfull
          content:
            "application/json":
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    format: int32
                    example: 201
                  message:
                    type: string
                    example: user creates successfully
                  token:
                    type: object
                    properties:
                      access_token:
                        type: string
                        example: jrwejrtepwojdsngvsdfngedrjgdjgdfgdfgdg
                  links:
                    type: object
                    properties:
                      self:
                        type: string
                        example: "/auth/signup"
                      signin:
                        type: string
                        example: "/auth/signin"
        "400":
          $ref: "#/components/responses/400"
        "500":
          $ref: "#/components/responses/500"
  /auth/signin:
    post:
      description: signin endpoint
      tags:
        - Auth
      requestBody:
        content:
          "application/json":
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
                  format: password
                  example: pass123
              required:
                - email
                - password
      responses:
        "200":
          description: signin successfull
          content:
            "application/json":
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    format: int32
                    example: 201
                  message:
                    type: string
                    example: signin sucessfull
                  token:
                    type: object
                    properties:
                      access_token:
                        type: string
                        example: r95ofgksdnf,sdnwejftl;ksndf,sdnv
                  links:
                    type: object
                    properties:
                      self:
                        type: string
                        example: "/auth/signin"
        "400":
          $ref: "#/components/responses/400"
        "500":
          $ref: "#/components/responses/500"
  /articles:
    get:
      description: Retrive all  published articles
      tags:
        - Article
      parameters:
        - $ref: "#/components/parameters/pageParams"
        - $ref: "#/components/parameters/limitParam"
        - $ref: "#/components/parameters/sortTypeParam"
        - $ref: "#/components/parameters/sortByParam"
        - $ref: "#/components/parameters/searchparam"
      responses:
        "200":
          description: Return a list of article
          content:
            "application/json":
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      allOf:
                        - type: object
                          properties:
                            id:
                              type: integer
                              format: int32
                              example: 1
                            title:
                              type: string
                              example: Article title
                            cover:
                              type: string
                              format: url
                              example: http://s3.aws.eom/firstblog/sdja.jpg
                            author:
                              $ref: "#/components/schemas/AuthorDTO"
                            link:
                              type: string
                              format: url
                              example: "/articles/1"
                          required: [id, title, author]
                        - $ref: "#/components/schemas/TimeStamp"
                  pagination:
                    $ref: "#/components/schemas/pagination"
                  links:
                    type: object
                    properties:
                      self:
                        type: string
                        format: url
                        example: "/articles?page=2&limit=10"
                      next:
                        type: string
                        format: url
                        example: "/articles?page=3&limit=10"
                      prev:
                        type: string
                        format: url
                        example: "/articles?page=1&limit=10"
        "400":
          $ref: "#/components/responses/400"
        "500":
          $ref: "#/components/responses/500"
    post:
      security:
        - bearerAuth: []

      description: create a new article
      tags:
        - Article
      requestBody:
        content:
          "application/json":
            schema:
              type: object
              properties:
                title:
                  type: string
                  example: Atricle tittle
                body:
                  type: string
                  example: Atricle body
                cover:
                  type: string
                  format: url
                  example: "https://s3.aws.example.com/new.jpg"
                status:
                  type: string
                  enum:
                    - draft
                    - published
                  example: draft
      responses:
        "201":
          description: article created successfully
          content:
            "application/json":
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    format: int32
                    example: 201
                  message:
                    type: string
                    example: article created successfully
                  data:
                    $ref: "#/components/schemas/Article"
                  links:
                    type: object
                    properties:
                      self:
                        type: string
                        format: url
                        example: "/articles/id"
                      author:
                        type: string
                        format: url
                        example: "/articles/id/author"
                      comments:
                        type: string
                        format: url
                        example: "/articles/id/comments"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "500":
          $ref: "#/components/responses/500"
  /articles/{id}:
    get:
      tags:
        - Article
      description: fetch a single article
      parameters:
        - $ref: "#/components/parameters/inPathParam"
        - in: query
          name: expand
          description: expand author and comment object
          schema:
            type: string
            example: "author, comment"
      responses:
        "200":
          description: single article view
          content:
            "application/json":
              schema:
                type: object
                properties:
                  data:
                    allOf:
                      - $ref: "#/components/schemas/Article"
                      - type: object
                        properties:
                          author:
                            $ref: "#/components/schemas/AuthorDTO"
                      - type: object
                        properties:
                          comments:
                            type: array
                            items:
                              $ref: "#/components/schemas/Comment"

                  links:
                    type: object
                    properties:
                      self:
                        type: string
                        example: "article/1"
                      author:
                        type: string
                        example: "article/1/author"
                      comments:
                        type: string
                        example: "article/1/comments"

        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
    put:
      security:
        - bearerAuth: []
      tags:
        - Article
      description: update an article using put
      parameters:
        - $ref: "#/components/parameters/inPathParam"
      requestBody:
        content:
          "application/json":
            schema:
              type: object
              properties:
                id:
                  type: integer
                  format: int32
                  example: 1
                title:
                  type: string
                  example: Atricle tittle
                body:
                  type: string
                  example: Atricle body
                cover:
                  type: string
                  format: url
                  example: "https://s3.aws.example.com/new.jpg"
                status:
                  type: string
                  example: draft
                  enum:
                    - draft
                    - published
              required: [title, body]
      responses:
        "200":
          description: article update successfully
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/ArticleUpdateDTO"
        "201":
          description: article created successfully
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/ArticleCreateDTO"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "500":
          $ref: "#/components/responses/500"
    patch:
      tags:
        - Article
      security:
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/inPathParam"
      requestBody:
        content:
          "application/json":
            schema:
              type: object
              properties:
                id:
                  type: integer
                  format: int32
                  example: 1
                title:
                  type: string
                  example: Atricle tittle
                body:
                  type: string
                  example: Atricle body
                cover:
                  type: string
                  format: url
                  example: "https://s3.aws.example.com/new.jpg"
                status:
                  type: string
                  example: draft
                  enum:
                    - draft
                    - published
      responses:
        "200":
          description: updated successfully
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/ArticleUpdateDTO"
        "404":
          $ref: "#/components/responses/404"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
    delete:
      security:
        - bearerAuth: []
      tags:
        - Article
      description: delete an article by id
      parameters:
        - $ref: "#/components/parameters/inPathParam"
      responses:
        "204":
          description: successfully deleted
        "401":
          $ref: "#/components/responses/401"
        "404":
          $ref: "#/components/responses/404"
  /articles/{id}/comments:
    get:
      description: get all comments for a given article
      tags:
        - Article
      parameters:
        - $ref: "#/components/parameters/pageParams"
        - $ref: "#/components/parameters/limitParam"
      responses:
        "200":
          description: fetch comments for specific Article
          content:
            "application/json":
              schema:
                type: object
                allOf:
                  - type: object
                    properties:
                      data:
                        allOf:
                          - type: object
                            $ref: "#/components/schemas/CommentDTO"
                          - type: object
                            $ref: "#/components/schemas/TimeStamp"
                          - type: object
                            properties:
                              author:
                                $ref: "#/components/schemas/AuthorDTO"
                      pagination:
                        type: object
                        $ref: "#/components/schemas/pagination"
                      links:
                        type: object
                        properties:
                          self:
                            type: string
                            format: url
                            example: "/article/{id}/comments"
                          article:
                            type: string
                            format: url
                            example: "/article/{id}"
                          author:
                            type: string
                            format: url
                            example: "/article/{id}/comments/author"
                          next:
                            type: string
                            format: url
                            example: "/article/{id}/comments?page=3&limit=10"
                          prev:
                            type: string
                            format: url
                            example: "/article/{id}/comments?page=1&limit=10"
        "400":
          $ref: "#/components/responses/400"
    post:
      security:
        - bearerAuth: []
      description: create a comment for specific article
      tags:
        - Article
      requestBody:
        content:
          "application/json":
            schema:
              type: object
              properties:
                body:
                  type: string
                  example: comment body
              required:
                - body
      responses:
        "201":
          description: successfully created comment
          content:
            "application/json":
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    format: int32
                    example: 201
                  message:
                    type: string
                    example: successfully created comment
                  data:
                    type: object
                    allOf:
                      - $ref: "#/components/schemas/CommentDTO"
                      - $ref: "#/components/schemas/TimeStamp"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "404":
          $ref: "#/components/responses/404"
  /article/{id}/author:
    get:
      description: get author of the given article
      tags:
        - Article
      responses:
        "200":
          description: get author name of the given article
          content:
            "application/json":
              schema:
                type: object
                properties:
                  author:
                    type: object
                    $ref: "#/components/schemas/AuthorDTO"
                  links:
                    type: object
                    properties:
                      self:
                        type: string
                        format: url
                        example: /article/{id}/author
                      article:
                        type: string
                        format: url
                        example: /article/{id}
        "404":
          $ref: "#/components/responses/404"

components:
  securitySchemes:
    bearerAuth:
      scheme: bearer
      type: http
      bearerFormat: JWT

  schemas:
    ArticleCreateDTO:
      type: object
      properties:
        code:
          type: integer
          format: int32
          example: 201
        message:
          type: string
          example: created successfully
        data:
          $ref: "#/components/schemas/Article"
        links:
          type: object
          properties:
            self:
              type: string
              format: url
              example: "/article/1"
    ArticleUpdateDTO:
      type: object
      properties:
        code:
          type: integer
          format: int32
          example: 200
        message:
          type: string
          example: updated successfully
        data:
          $ref: "#/components/schemas/Article"
        links:
          type: object
          properties:
            self:
              type: string
              format: url
              example: "/article/1"
    Comment:
      allOf:
        - type: object
          properties:
            id:
              type: integer
              format: int32
              example: 1
            authorId:
              type: integer
              format: int32
              example: 13
            articleId:
              type: integer
              format: int32
              example: 13
            body:
              type: string
              example: Comment body
            status:
              type: string
              enum:
                - public
                - private
              example: public
          required: [id, body, status, authorId, articleId]
        - $ref: "#/components/schemas/TimeStamp"
    Article:
      allOf:
        - type: object
          properties:
            id:
              type: integer
              format: int32
              example: 1
            title:
              type: string
              example: Atricle tittle
            body:
              type: string
              example: Atricle body
            cover:
              type: string
              format: url
              example: "https://s3.aws.example.com/new.jpg"
            status:
              type: string
              example: draft
          required: [title, body, status]
        - $ref: "#/components/schemas/TimeStamp"
    TimeStamp:
      type: object
      properties:
        createdAt:
          type: string
          format: time
        updatedAt:
          type: string
          format: time
      required: [createdAt, updatedAt]
    AuthorDTO:
      type: object
      properties:
        id:
          type: integer
          format: int32
          example: 2
        name:
          type: string
          example: A.B Rayhan
      required: [id, name]
    pagination:
      type: object
      properties:
        page:
          type: integer
          format: int32
          example: 2
        limit:
          type: integer
          format: int32
          example: 10
        next:
          type: integer
          format: int32
          example: 3
        prev:
          type: integer
          format: int32
          example: 1
        totalPage:
          type: integer
          format: int32
          example: 5
        totalItems:
          type: integer
          format: int32
          example: 5
    CommentDTO:
      type: object
      properties:
        id:
          type: integer
          format: int32
          example: 1
        body:
          type: string
          example: coment body
      required:
        - id
        - body

  responses:
    "400":
      description: bad request.
      content:
        "application/json":
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
                example: 400
              error:
                type: string
                example: bad request.
              data:
                type: array
                items:
                  type: object
                  properties:
                    field:
                      type: string
                      example: email
                    message:
                      type: string
                      example: invalid email
    "401":
      description: Unauthorized
      content:
        "application/json":
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
                example: 401
              error:
                type: string
                example: Unauthorized
              message:
                type: string
                example: You don't have right permission .
    "404":
      description: Not found
      content:
        "application/json":
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
                example: 404
              error:
                type: string
                example: not found
              message:
                type: string
                example: requsted resource not found
    "500":
      description: Internal server error.
      content:
        "application/json":
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
                example: 500
              message::
                type: string
                example: internal server error.

  parameters:
    pageParams:
      in: query
      name: page
      description: current page number
      schema:
        type: integer
        format: int32
        example: 2
    limitParam:
      in: query
      name: limit
      description: maximum items to be returned
      schema:
        type: integer
        format: int32
        example: 10
    sortTypeParam:
      in: query
      name: sort_type
      description: the type of sort(asc or dsc)
      schema:
        type: string
        enum:
          - asc
          - dsc
        example: asc
    sortByParam:
      in: query
      name: sortBy
      description: sort key
      schema:
        type: string
        example: updatedAt
    searchparam:
      in: query
      name: search
      description: serach term
      schema:
        type: string
        example: title
    inPathParam:
      in: path
      name: id
      required: true
      description: article id
      schema:
        type: integer
        format: int32
        example: 1
